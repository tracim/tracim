######################
# Tracim Config File #
######################

## GENERAL TRACIM config:
# These config are common for all app : REST API, Webdav, etc...

[DEFAULT]

###############
# BASIC SETUP #
###############

# easy setup (shortcut) for setting most common config
# search for "%(param)s" to check where those param are used and why

## global info (need for email and links)
basic_setup.website_title = Tracim
basic_setup.website_base_url =  http://localhost:6543
basic_setup.listen = localhost:6543
## storage path/connection
basic_setup.sqlalchemy_url = sqlite:///%(here)s/tracim.sqlite
basic_setup.depot_storage_dir = %(here)s/depot
basic_setup.caldav_storage_dir = %(here)s/radicale_storage
basic_setup.preview_cache_dir = %(here)s/previews
basic_setup.sessions_data_root_dir = %(here)s
## secret
# This is needed for some feature like reply by email
basic_setup.api_key =
basic_setup.session_secret = change_this_value_please!

##################
# ADVANCED SETUP #
##################

####
# CORE
####

### Lang ###
## default lang used in backend if user doesn't provided any lang.
# Available parameter: en, fr
; default_lang = en

### Apps ###
## app enabled explicit list:
# this allow you to explictly disable default app or enabled beta app now
# already added to default list.
# This parameter is a list of app slug separated by ',' char.
## Not exhaustive list of available apps:
# - content/thread -> thread/topic/discussion : allow to discuss about one
#   subject.
# - content/file -> allow to upload all type of file like .pdf, .odt, .jpg, etc
# - content/html-document -> allow to work on a standard html-based document
#   which is editable through tracim.
# - content/folder -> allow to put content into folder.
## example of app.enabled config explicit list config
; app.enabled = contents/thread,contents/file,contents/html-document,contents/folder

## CORS Special config
# you can override access control allowed origin here with list of comma separated
# base_url, by default only website.base_url and api.base_url are allowed
; cors.access-control-allowed-origin = http://localhost:6543,http://localhost:8090

####
# STORAGE
####

### Database ###
# to set database you need a proper sqlalchemy url, some example with supported
# database (sqlite, postgresql, mysql/mariadb)
## sqlite
; sqlalchemy.url = sqlite:///%(here)s/tracim.sqlite
## mysql/mariadb
; sqlalchemy.url = mysql+pymysql://user:password@dbhost:dbport/dbname
## postgresql
; sqlalchemy.url = postgresql://user:paswword@dbhost:dbport/dbname?client_encoding=utf8
# see also for more info:
# https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine ##
sqlalchemy.url = %(basic_setup.sqlalchemy_url)s

### File Depot ###
## file depot name
depot_storage_name = tracim
## This is where none database file will be stored
depot_storage_dir = %(basic_setup.depot_storage_dir)s

### Preview ###
## preview cache directory
preview_cache_dir = %(basic_setup.preview_cache_dir)s

## You can parametrized allowed jpg preview dimension list, if not set, default
## is 256x256. First {width}x{length} items is default preview dimensions.
## All items should be separated by a coma. Example below:
; preview.jpg.allowed_dims = 256x256,512x512,1024x1024
## Preview dimensions can be set as restricted. If set as restricted, access
## endpoint to get any other preview dimensions than allowed_dims will
## return error
; preview.jpg.restricted_dims = True

### Session ###
# shortcut for pyramid_beaker specific config
# see tracim_web app section to see where those shortcut are used
advanced_setup.session_data_dir = %(basic_setup.sessions_data_root_dir)s/sessions_data
advanced_setup.session_lock_dir = %(basic_setup.sessions_data_root_dir)s/sessions_lock

### pyramid_beaker parameters ###
session.type = file
session.data_dir = %(advanced_setup.session_data_dir)s
session.lock_dir = %(advanced_setup.session_lock_dir)s
session.key = session_key
session.secret = %(basic_setup.session_secret)s
session.save_accessed_time = True
## Delay in seconds
session.cookie_expires = 604800
session.timeout = 604800
session.cookie_on_exception = True
## custom tracim pyramid_beaker parameter
; session.reissue_time = 120

####
# AUTH
####

### API KEY AUTH ###
# Api key auth allow to access to any authenticated user using
# 'Tracim-Api-Key'(secret share between client and tracim)
# and 'Tracim-Api-Login' (mail of existing user) headers.

## Api key auth is disabled by default,
## you should set a not-null value to api.key to active it:
api.key = %(basic_setup.api_key)s
## base url of the backend API, default to same as website.base_url
; api.base_url = http://localhost:6543

### Remote User Auth ###
# remote user auth give authorized access to user using a simple header with
# email of user, if user does not exist, new user will be created.
# This allow to delegate auth mecanism to webserver.
# this a true auth mecanism like internal or ldap,
# this mean user created this way will be attached to this mecanism.


## Remote user header should be a CGI env var.
## most common value is "REMOTE_USER".
## You can also directly use HTTP header instead of standard CGI env var
## using "HTTP_" CGI env var which are HTTP header
## but be careful about spoofing, you should be sure that no-one can set
## header and pretend to be anyone. Only trusted server should be able to
## set remote_user_header.
## remote user auth is disabled by default,
## you should set a not-null value to auth_remote_header to active it:
remote_user_header =

## Auth type list (internal or ldap), can be a list of item separated by ','
## and ordered by priority
## auth_type 'remote' is not allowed there, set remote_auth_header.
auth_types = internal
# If auth_type is ldap, uncomment following ldap_* parameters
## LDAP server address
; ldap_url = ldap://localhost:389
## Base dn to make queries
; ldap_base_dn = dc=directory,dc=fsf,dc=org
## Bind dn to identify the search
; ldap_bind_dn = cn=admin,dc=directory,dc=fsf,dc=org
## The bind password
; ldap_bind_pass = toor
## Base dn to make queries of users
; ldap_user_base_dn = ou=Users,dc=directory,dc=fsf,dc=org
## Attribute name of user record who contain user login (email)
; ldap_login_attribute = mail
## Attribute for default name of new user from ldap
; ldap_name_attributes = givenName
## TLS usage to communicate with your LDAP server
; ldap_tls = False

## User auth token validity in seconds (used to interfaces like web calendars)
user.auth_token.validity = 604800
## user reset_password token lifetime (default to 900s -> 15 minutes)
user.reset_password.token_lifetime = 900

####
# IHM
####

### Website config ###
## title of website, used in email
website.title = %(basic_setup.website_title)s
# The following base_url is used for links and icons
# integrated in the email notifcations, it's the frontend config.
website.base_url = %(basic_setup.website_base_url)s



### Frontend ###
## if you want to use tracim API without frontend, change this parameter to False
frontend.serve = True
# You can set dist folder of tracim frontend. by default, system
# will try to get it automatically according to tracim repository
# organisation.
; frontend.dist_folder_path = /home/user/tracim/frontend/dist

### Color ###
# check for color.json file in tracim, check by default in tracim parent
# dir of backend.
## you can set a specific file path here
; color.config_file_path = /home/user/tracim/color.json

### Webdav ###
# webdav url for client
# url can be extended like localhost/webdav by setting webdav.root_path parameter
# in this case, you have to create your own proxy behind this url.
webdav.base_url = http://localhost:3030
webdav.ui.enabled = True

####
# EMAIL-COMMON
####

## shortcut for template_dir path
email.template_dir = %(here)s/tracim_backend/templates/mail

### Email sending configuration ###
# processing_mode may be sync or async,
# if async is choosen, you need also to run mail_notifier daemon
# see README for more info.
email.processing_mode = sync
## with async, please also configure redis below
; email.async.redis.host = localhost
; email.async.redis.port = 6379
; email.async.redis.db = 0

####
# EMAIL-NOTIFICATION
####

## available choice: True or False
email.notification.activated = False
## you can enable or disable if invited user to shared space will be notified
## on this shared space by default (default: True).
## NB: new users will not being notified until they login to tracim a first time
; email.notification.enabled_on_invitation = True
# You can activate notification specific log using 'tracim_email_notification' logger.


### SMTP ###
email.notification.smtp.server = your_smtp_server
email.notification.smtp.port = 25
email.notification.smtp.user = your_smtp_user
email.notification.smtp.password = your_smtp_password

### Headers ###
email.notification.from.default_label = Tracim Notifications

# Note: items between { and } are variable names. Do not remove / rename them
# email notifications can be sent with the user_id added as an identifier
# this way email clients like Thunderbird will be able to distinguish
# notifications generated by a user or another one. 'content_id' for example is
# needed in both 'reply_to' and 'references' header pattern
# to have email_reply feature working correctly.

# header for from, reply-to and references headers.
# those allow to set one variable only one time in email pattern, this kind
# of pattern with multiple variable will not work correctly :
# reply+{content_id}{content_id}@trac.im

# example of recommanded pattern (for 'reply_to' header):
; email.notification.reply_to.email = reply+{content_id}@domainname.tld
; email.notification.reply_to.email = {content_id}@reply.domainname.tld
; email.notification.reply_to.email = reply+cid{content_id}@domainname.tld

## valid variable is 'user_id' for 'from' header
email.notification.from.email = noreply+{user_id}@trac.im

# tagging reply_to header of email with content_id is needed for working
# email_reply feature
## valid variable is 'content_id' for 'reply_to' header
email.notification.reply_to.email = reply+{content_id}@trac.im
# tagging reference header of email with content_id is nice to have
# all modification to a same content in a same email client thread
# Note: reference doesn't need to be an existing email account but should
# be a email like string.
## valid variable is 'content_id' for 'references' header
email.notification.references.email = thread+{content_id}@trac.im
email.notification.content_update.subject = [{website_title}] [{workspace_label}] {content_label} ({content_status_label})
email.notification.created_account.subject = [{website_title}] Someone created an account for you

### Templates ###
email.notification.content_update.template.html = %(email.template_dir)s/content_update_body_html.mak
email.notification.created_account.template.html = %(email.template_dir)s/created_account_body_html.mak
email.notification.reset_password_request.template.html = %(email.template_dir)s/reset_password_body_html.mak

####
# EMAIL-REPLY
####

# Email reply configuration:
# Reply by email feature: allow user to answer directly to tracim in reply
# to notification.
# This need api.key with non-empty value
# This feature need to run mail_fetcher daemons.
# more info in README (Run daemons according to your config)
## available choice: True or False
email.reply.activated = False

### IMAP ###
# Tracim email reply feature will read all mails in following IMAP,
# to be able to transform email responses into Tracim app comments.
email.reply.imap.server = your_imap_server
email.reply.imap.port = 993
email.reply.imap.user = your_imap_user
email.reply.imap.password = your_imap_password
email.reply.imap.folder = INBOX
email.reply.imap.use_ssl = True
# IMAP IDLE feature is for real-time notifications (its not necessary to use function send & receive)
# if this option is available in your imap server, change this parameter to True
email.reply.imap.use_idle = False

### Connection ###
## Delay in seconds for re-new connection
email.reply.connection.max_lifetime = 600
## Delay in seconds between each check
email.reply.check.heartbeat = 60

### Parsing ###
email.reply.use_html_parsing = True
email.reply.use_txt_parsing = True

### Lock ###
# Lockfile path is required for email_reply feature,
# it's just an empty file use to prevent concurrent access to imap unseen mail
email.reply.lockfile_path = %(here)s/email_fetcher.lock

####
# WEBDAV
####

### Main Webdav Config ###
## webdav server hostname listen
webdav.listen = localhost:3030
## default root of webdav service ( default : / )
## this params need to be modified in case of using webdav with proxy
## if you want for example that path /webdav give access to webdav
;webdav.root_path = /

### Technical Webdav configuration ###
## wsgidav block size in bytes (default: 8192)
; webdav.block_size = 8192
## wsgidav verbose level (default: 1)
## 0 - quiet
## 1 - no output (excepting application exceptions)
## 2 - warnings and errors only
## 3 - show single line request summaries (HTTP logging)
## 4 - show additional events
## 5 - show full request/response header info (HTTP Logging)
##     request body and GET response bodies not shown
; webdav.verbose.level = 1

### Webdav HTML dir browser ###
## Render HTML listing for GET requests on collections (default: True)
; webdav.dir_browser.enabled = True
## Raw HTML code, appended as footer, if not set, let tracim created his own
## footer.
; webdav.dir_browser.footer = Just another footer

####
# CALDAV (Radicale)
####

### Main Config for Caldav ##
caldav.enabled = True

### Radicale Proxy config ##
## path to tracim radicale server, usually at localhost:port
caldav.radicale_proxy.base_url = http://localhost:5232

### Radicale config ###
# those params are same as in config file of radicale but syntax
# is different.
# use syntax:
; caldav.radicale.section.param_name = value
# instead of radicale.ini syntax:
; [section]
; param_name = value
caldav.radicale.server.host = localhost:5232
## To make tracim work, we need to disable auth and rights.
caldav.radicale.auth.type = None
caldav.radicale.rights.type = None
## We do not need radicale web ui
caldav.radicale.web.type = None
## for tracim we do use file storage.
caldav.radicale.storage.type = multifilesystem
caldav.radicale.storage.filesystem_folder = %(basic_setup.caldav_storage_dir)s
# CORS config for radicale
caldav.radicale.headers.Access-Control-Allow-Origin = *
caldav.radicale.headers.Access-Control-Allow-Methods =  GET, POST, OPTIONS, PROPFIND, PROPPATCH, REPORT, PUT, MOVE, DELETE, LOCK, UNLOCK
caldav.radicale.headers.Access-Control-Allow-Headers =  User-Agent, Authorization, Content-type, Depth, If-match, If-None-Match, Lock-Token, Timeout, Destination, Overwrite, X-client, X-Requested-With, Prefer
caldav.radicale.headers.Access-Control-Expose-Headers = Etag

####
# SEARCH (ElasticSearch)
####
# choose search engine to use, available value are: simple, elasticsearch.
# simple need nothing more than tracim but features are limited,
# elasticsearch is more effective but need an elasticsearch server.
search.engine = simple
# elasticsearch configuration
;search.elasticsearch.host = localhost
;search.elasticsearch.port = 9200
# global elasticsearch timeout in seconds
;search.elasticsearch.request_timeout = 60
# main index alias use to search/index content in elasticsearch
;search.elasticsearch.index_alias = tracim_contents
# template_name for all index created currently only {index_alias} and {date} variable are usable.
# be carefull this template is use to find all index to delete with tracimcli search delete command
# default value is "{index_alias}-{date}"
;search.elasticsearch.index_pattern_template = {index_alias}-{date}
# if you use ingest mode in elasticsearch, you can activate file content ingest
# for search (default as false)
; search.elasticsearch.use_ingest = false
# if you set ingest mimetype whitelist to list of separated mimetype by "," , you will index file
# content for only file with those mimetype, if set to empty, allow any mimetype, default value
# allow most text-based content type.
; search.elasticsearch.ingest.mimetype_whitelist = text/markdown,text/plain


##############################
# SPECIFIC CONFIG FOR WEBAPP #
##############################

### WEB REST API specific config ###
# Rest API running pyramid framework
[pipeline:main]
pipeline = tracim_web
[app:tracim_web]
use = egg:tracim_backend

# hapic debug mode: return python traceback of error
debug = False

### pyramid config ###
pyramid.reload_templates = True
pyramid.debug_authorization = False
pyramid.debug_notfound = False
pyramid.debug_routematch = False
pyramid.default_locale_name = en
## More info here:
## https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/i18n.html#localization-deployment-settings

### pyramid optionals plugins ###
#required plugin are imported directly in tracim source code
; pyramid.includes =
;    pyramid_debugtoolbar

[pipeline:webdav]
pipeline = tracim_webdav
[app:tracim_webdav]
use = egg:tracim_backend#webdav

[pipeline:caldav]
pipeline = tracim_caldav
[app:tracim_caldav]
use = egg:tracim_backend#caldav

[server:main]
use = egg:waitress#main
listen = %(basic_setup.listen)s

[server:webdav]
use = egg:waitress#main
listen = %(webdav.listen)s

[server:caldav]
use = egg:waitress#main
listen = %(caldav.radicale.server.host)s
######################
# DATABASE MIGRATION #
######################

[alembic]
## path to migration scripts
script_location = tracim_backend/migration

## template used to generate migration files
; file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
## leave blank for localtime
; timezone =

## max length of characters to apply to the "slug" field
; truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
; revision_environment = False

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
; sourceless = False

# version location specification; this defaults to migrate/versions.
# When using multiple version directories,
# initial revisions must be specified with --version-path
; version_locations = %(here)s/bar %(here)s/bat migrate/versions

# the output encoding used when revision files
# are written from script.py.mako
; output_encoding = utf-8

###########
# LOGGERS #
###########

## more info here :
## https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html

## level possibilities
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

### LOGGERS ###
[loggers]
keys = root, tracim, sqlalchemy, alembic, hapic
# add Tracim_email_notification logfile
# this need to add tracim_email_notification handler and tracim_email_notification formatter
; keys = root, tracim, sqlalchemy, alembic, hapic, tracim_email_notification

[logger_root]
level = INFO
handlers = console

[logger_tracim]
level = DEBUG
handlers =
qualname = tracim

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_hapic]
level = DEBUG
handlers =
qualname = hapic

[logger_tracim_email_notification]
level = INFO
handlers = tracim_email_notification
qualname = tracim_email_notification
propagate = 0

### FORMATTER ###
# colored log formatter for console (do not work properly with file)
# this need coloredlog python package, you can install it in venv
# with 'pip install colorlog'

[formatters]
keys = generic
## colored log format (need colorlog)
; keys = color

[formatter_color]
class=colorlog.ColoredFormatter
format = %(asctime)s %(log_color)s%(levelname)-5.5s %(reset)s[%(name)s:%(lineno)s][%(threadName)s] %(log_color)s%(message)s
datefmt = %H:%M:%S

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
datefmt = %H:%M:%S

[formatter_tracim_email_notification]
format = %(asctime)s %(network)s %(action)s %(recipient)s %(subject)s %(message)s
datefmt = %H:%M:%S

### HANDLERS ###
[handlers]
keys = console
# use file log instead
; keys = logfile
# add tracim_email_notification_handler
# this logger is useful to log when notification is prepared
# ( for email: email is build)
# and when notification is send (for email: email is send)
; keys = console, tracim_email_notification

### Console log ###
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic
# colored console log (need colorlog python package)
; formatter = color

### Rotated file log ###
[handler_logfile]
class=handlers.RotatingFileHandler
level=NOTSET
# file name = tracim.log (created in current dir)
# max log size = 10Mo
# number of max log file = 5
args=('tracim.log','a',10*1024*1024,5)
formatter=generic

# file log for tracim_email_notification
[handler_tracim_email_notification]
class=FileHandler
level=INFO
args=('tracim_email_notification.log','a')
formatter=tracim_email_notification

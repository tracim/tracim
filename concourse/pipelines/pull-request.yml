# YAML definitions re-used in plans
pending_status_notification: &pending_status_notification
  put: tracim-status-update
  resource: pull-request
  inputs: [pull-request]
  params: {path: pull-request, status: pending, context: "linting & tests"}
  get_params: {skip_download: true}

failure_status_notifications: &failure_status_notifications
  on_failure:
    put: pull-request
    inputs: [pull-request]
    params: {path: pull-request, status: failure, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}
  on_abort:
    put: pull-request
    inputs: [pull-request]
    params: {path: pull-request, status: error, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}

resource_types:
- name: pull-request
  type: registry-image
  source:
    repository: aoldershaw/github-pr-resource

resources:
- name: pull-request
  type: pull-request
  check_every: 30s
  # TODO - S.G. - 2021/08/02
  # The token is not used as one webhook would have to be created PER PR in github.
  # This could be automated, but is not so easy.
  webhook_token: ((github-webhook-token))
  source:
    repository: tracim/tracim
    access_token: ((github-access-token))
    number: ((number))
- name: test-image
  type: registry-image
  source:
    repository: algooci/tracim

jobs:
- name: reconfigure-self
  plan:
  - get: pull-request
    trigger: true

  - *pending_status_notification

  - set_pipeline: self
    file: pull-request/concourse/pipelines/pull-request.yml
    vars:
      github-webhook-token: ((github-webhook-token))
      github-access-token: ((github-access-token))

- name: backend-tests
  <<: *failure_status_notifications
  plan:
  - in_parallel:
    - get: pull-request
      passed: [reconfigure-self]
      trigger: true
    - get: test-image

  - task: backend-lint
    image: test-image
    config:
      platform: linux
      inputs:
        - name: pull-request
      run:
        dir: pull-request
        path: concourse/scripts/backend-lint

  - across:
    - var: python_version
      values: ["3.5.10" , "3.6.14", "3.7.11"]
      max_in_flight: all
    task: backend-quick-tests_((.:python_version))
    image: test-image
    # TODO - S.G. - 2021-08-04: is there a less instrusive way to allow docker-in-docker ?
    privileged: true
    config:
      platform: linux
      inputs:
        - name: pull-request
      run:
        dir: pull-request
        path: concourse/scripts/backend-quick-tests
        args:
          - ((.:python_version))

  - across:
    - var: database
      values: ["sqlite", "postgresql", "mysql", "mariadb"]
      max_in_flight: all
    task: backend-full-tests_((.:database))
    image: test-image
    # TODO - S.G. - 2021-08-04: is there a less instrusive way to allow docker-in-docker ?
    privileged: true
    config:
      platform: linux
      inputs:
        - name: pull-request
      run:
        dir: pull-request
        path: concourse/scripts/backend-full-tests
        args:
          - "3.7.11"
          - ((.:database))

- name: frontend-tests
  <<: *failure_status_notifications
  plan:
  - in_parallel:
    - get: pull-request
      passed: [reconfigure-self]
      trigger: true
    - get: test-image

  - task: frontend-unit-tests
    image: test-image
    config:
      platform: linux
      inputs:
        - name: pull-request
      run:
        dir: pull-request
        path: concourse/scripts/frontend-unit-tests

- name: end-to-end-tests
  <<: *failure_status_notifications
  plan:
  - in_parallel:
    - get: pull-request
      trigger: true
    - get: test-image

  - task: end-to-end-cypress-tests
    image: test-image
    # needed for docker during tests
    # TODO - S.G. - 2021-08-04: is there a less instrusive way to allow docker-in-docker ?
    privileged: true
    config:
      platform: linux
      inputs:
        - name: pull-request
      run:
        dir: pull-request
        path: concourse/scripts/end-to-end-cypress-tests

- name: notify-pull-request-success
  <<: *failure_status_notifications
  on_success:
    put: pull-request
    inputs: [pull-requests]
    params: {path: pull-request, status: success, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}
  plan:
    - get: pull-request
      trigger: true
      passed: [backend-tests, frontend-tests, end-to-end-tests]
